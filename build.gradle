plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id "com.github.ben-manes.versions" version "0.51.0"
}

group 'org.athenian'
version '1.0-SNAPSHOT'

repositories {
    google()
    mavenCentral()
}

kotlin {
    jvmToolchain(11)
}

def annotationVersion = "1.3.2"
def coroutinesVersion = '1.9.0'
def grpcVersion = '1.69.0'
def logbackVersion = '1.5.12'
def loggingVersion = '7.0.3'
def protocVersion = '3.25.3'
def slf4jVersion = '2.0.13'

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutinesVersion"

    implementation "io.grpc:grpc-netty-shaded:$grpcVersion"
    implementation "io.grpc:grpc-protobuf:$grpcVersion"
    implementation "io.grpc:grpc-stub:$grpcVersion"
    implementation "io.grpc:grpc-services:$grpcVersion"

    implementation "io.github.oshai:kotlin-logging:$loggingVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "org.slf4j:jul-to-slf4j:$slf4jVersion"

    compileOnly "javax.annotation:javax.annotation-api:$annotationVersion"

    testImplementation "io.grpc:grpc-testing:$grpcVersion"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protocVersion"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}     // Generate Java gRPC classes
            }
        }
    }
}
compileKotlin.dependsOn ':generateProto'

startScripts.enabled = false

task ChunkerServer(type: CreateStartScripts) {
    mainClassName = 'org.athenian.chunker.ChunkerServer'
    applicationName = 'chunker-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task ChunkerClient(type: CreateStartScripts) {
    mainClassName = 'org.athenian.chunker.ChunkerClient'
    applicationName = 'chunker-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(ChunkerServer)
    from(ChunkerClient)
    fileMode = 0755
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += ['-Xuse-experimental=kotlin.ExperimentalStdlibApi']
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs += ['-Xuse-experimental=kotlin.ExperimentalStdlibApi']
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}