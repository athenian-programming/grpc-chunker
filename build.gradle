plugins {
    id 'application'
    id 'java'
    id 'com.google.protobuf' version '0.8.12'
    id 'org.jetbrains.kotlin.jvm' version '1.3.71'
    id "com.github.ben-manes.versions" version "0.28.0"
}

group 'org.athenian'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven {
        // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    jcenter()
}

def annotationVersion = "1.3.2"
def coroutinesVersion = '1.3.1'
def grpcVersion = '1.28.0'
def loggingVersion = '1.7.9'
def protocVersion = '3.11.4'
def slf4Version = '1.7.28'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutinesVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:${coroutinesVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:${coroutinesVersion}"

    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"

    implementation "org.slf4j:slf4j-simple:${slf4Version}"
    implementation "io.github.microutils:kotlin-logging:${loggingVersion}"

    compileOnly "javax.annotation:javax.annotation-api:${annotationVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

compileKotlin.dependsOn ':generateProto'

startScripts.enabled = false

task ChunkerServer(type: CreateStartScripts) {
    mainClassName = 'org.athenian.chunker.ChunkerServer'
    applicationName = 'chunker-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task ChunkerClient(type: CreateStartScripts) {
    mainClassName = 'org.athenian.chunker.ChunkerClient'
    applicationName = 'chunker-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(ChunkerServer)
    from(ChunkerClient)
    fileMode = 0755
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlin.ExperimentalStdlibApi']
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlin.ExperimentalStdlibApi']
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}